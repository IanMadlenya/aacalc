AACalc is an asset allocation and consumption planning calculator.

Notable features include:

  - A stochastic dynamic programming module to compute optimal asset
    allocation and consumption strategies assuming time-wise
    independent returns.

  - A Monte-Carlo simulator to assess strategy performance.

  - A variety of pre-computed strategies: age in bonds, consensus
    target date, fixed, fixed with guaranteed income treated as a
    bond, 4% rule, constant percentage, VPW, RMD, 1/life etc.

  - A variety of correlation preserving bootstraping and synthetic
    return generation options for the Monte Carlo simulator.

  - The ability to report the odds of portfolio failure, the time
    spent in the portfolio failure state, and certainty equivalent
    consumption metrics.

  - Optional handling of taxation in the Monte Carlo simulator using a
    variety of lot based accounting modules.

  - Mortality handled stochastically using mortality tables.

  - When computing or simulating the performance of a strategy, the
    ability to use consumption utility functions indicative of floor
    and upside consumption preferences.

  - In addition to the standard asset classes, the ability to handle
    real or nominal annuities.

  - When handling 3 or more asset classes the ability to speed up
    performance in exchange for some loss of optimality by using mean
    variance optimization thanks to the Systematic Investor Toolbox.

  - Graphical display of the optimal strategy and its performance
    thanks to GNUPLOT.

  - An optional web based front end to the program.

  - In addition to the main asset allocation calculator, additional
    what's "my number", and life expectancy, web based calculators.

AACalc implementation:

  - Open source. Licensed under the GNU Affero GPL. See the file
    agpl-3.0.txt for details. I am experimenting with business models,
    and other licensing terms may be available.

  - Runs on Ubuntu 14.04 Linux and possibly other systems. The backend
    should be readily portable to other *nix systems. Frontend should
    be readily portable to other systems running Django 1.6.

  - Backend written in Java with call outs to R and GNUPLOT.

  - Able to take advantage of multicore computers for performance.  On
    a 32 core c3.8xlarge instance computing the optimal asset
    allocation takes a few seconds in the absence of annuities, or a
    few hours in their presence.

  - Web frontend written in Python using the Django framework.

  - Backend can be either run standalone, or in a server configuration
    talking to the frontend.

  - Backend capable of running in an autoscaling load balancing
    framework.

  - Backend performs minimal input sanity checking; responsibility for
    input sanity checking pushed on to frontend.

  - Backend uses hill climbing to avoid exhaustive search of the
    solution space.

  - Backend uses Shiller and a variety of other returns
    datasets. Backend uses Social Security cohort mortality and a
    variety of other mortality datasets.

To do:

  - Full scale optimization rather than MVO.

  - Generate synthetic returns with reversion to the mean by first
    computing return vs. distance from the mean regression.

  - Experiment with reducing the volatility when performing SDP to
    account for reversion to the mean.

Getting started:

  - It is suggested that Amazon EC2 be used for development work. A
    Ubuntu 14.04 c3.xlarge instance works fine. The same instance can
    be used to run the web server and the opal server. In production
    the load can be larger, and it may be necessary to run a separate
    web server and run multiple opal servers behind a load balancer.

  - Obtain the sources:

        sudo apt-get git-core
        git clone https://github.com/gordoni/aacalc.git

  - If might do developement work:
        cd aacalc
        git config --global user.name "<FirstName> <LastName>"
        git config --global user.email "<user@email.com>"

  - See opal/README for the Java backend.

  - See web/README for the web based frontend.
